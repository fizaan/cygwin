1. Computer Startup:
	MotherBoard
		- Take data from BIOS
		- BIOS copies firmware to RAM
		- CPU IP points to first firmware instruction in RAM
		- CPU executes instruction
			- Instruction says to read bootloader from HD
				and copy it to RAM.
			- Bootloader chooses the operating system to run
				which is then loaded into memory
			- CPU IP then points to the OS code and runs it.
		Hardware.switch(kernelmode);
		cpu.execute(OS);
1. CPU is now running OS code.
	- How can CPU run other user programs?
	
	When a new program comes in:
	- OS:
		new Process p();
		os.addNewProcess(p);
		os.loadprocess(p)
			HardDisk.loadProcessBinaryToMemory(p);
		Hardware.switch(usermode);
		os.changeCPUIP();
			cpu.fetch(IP);
			cpu.incrementIP();
			cpu.execute();
				process runs until HALT or exit
				..
				..
			cpu.returnControlOS();
		Hardware.switch(kernelmode);
		os.destroyProcess(p);
		os.removeProcess(p);
		

2. Algorithm: This assumes that the OS has booted up, trap table is set and identified and
   that we have a bunch of processes already scheduled and in the 'ready' state (i.e. ready 
   to be run)
   
   while(true) { // true? because OS is always running (I assume)
   
   	listen for interrupts
   	
   	if(interrupt occured)
   	
   	give control to hardware
   	
   	hardware pushes some reg onto current stack
   	
   	hardware looks up trap table
   	
   	hardware find the correct trap routine
   	
   	hardware instruction eip to jump to trap
   	
   	os takes control
   	
   	ISR is now running
   	
   	ISR pushes more General purpose regs onto stack
   	
   	ISR calls KBINTHandler()
   	
   	KBINTHandler determines next process to run
   	(among other things) and return's that processes'
   	esp
   	
   	ISR updates (switches) esp and thereby switches to
   	new processes' stack
   	
   	ISR pops off the values it pushed before
   	
   	return from trap routine
   	
   	give control to hardware
   	
   	hardware pops off those reg it pushed before 
   	including the new EIP
   	
   	hardware instructs cpu to jump to new EIP
   	
   	CPU is now executing the new process which is now running
   
   }
	
	

