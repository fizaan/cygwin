~~~~~~~~~~~~
Fayyaz notes
~~~~~~~~~~~~

Optimal policy walkthrough:

physical mem cache size = 3 // We can hold maximum three pages only at a given time.
                            // Anything above means we have reached capacity and must
                            // evict a page. (Pg 3)
virtaul pages array access sequence = [ 0, 1, 2, 0, 1, 3, 0, 3, 1, 2, 1 ]

for each x in access sequence
    if x in cache
        hit!
    else {
        miss
        if cache == 3 ?
            yes {
                 evict the page that will be accessed furthest in future
                 xPos = (index of x) + 1
                 for each x in access sequence starting at xPos
                    if cache[xPos] is furthest accessed ?
                        evict cache[xPos]

            }
            no {
                // do nothing
            }
        cache -> x
        cache++
    }

Trace:
0    miss    cache[0] = 0, cache++
1    miss    cache[1] = 1, cache++
2    miss    cache[2] = 2, cache++
0    hit
1    hit
3    miss    anything in cache to evict? Yes. Which page to evict? 2. cache[2] = 3.
0    hit
3    hit
1    hit
2    miss   anything in cache to evict? Yes.  Which page to evict? Anyone of 0 or 3. cache[2] = 2

Warning: The Optimal page-replacement policy is unrealistic because it assumes we know what the 
future requests for pages are. The following were implented in Java. See 'C:\Users\Alifa\Desktop
\lc3-backup\eclipse\Ostep\src\chapter\EvictionPolicy.java' for details.

    - fifo();
	- random();
	- lifo();
	- lfu();
    - lru();
    - mfu();
    - mru();

-----------------------------------------------------------------------------------------------
Here is the output. Notice the 3rd coloumn is showing results different from what you will See
in the book and that is because they are showing in the order of "first-in" hence my output 
isn't wrong.

fifo:

0	miss: 		0, 
1	miss: 		0, 1, 
2	miss: 		0, 1, 2, 
0	hit		    0, 1, 2, 
1	hit		    0, 1, 2, 
3	miss: 0		3, 1, 2, 
0	miss: 1		3, 0, 2, 
3	hit		    3, 0, 2, 
1	miss: 2		3, 0, 1, 
2	miss: 3		2, 0, 1, 
1	hit		    2, 0, 1, 

random:

0	miss: 		0, 
1	miss: 		0, 1, 
2	miss: 		0, 1, 2, 
0	hit		    0, 1, 2, 
1	hit		    0, 1, 2, 
3	miss: 0		3, 1, 2, 
0	miss: 2		3, 1, 0, 
3	hit		    3, 1, 0, 
1	hit		    3, 1, 0, 
2	miss: 1		3, 2, 0, 
1	miss: 2		3, 1, 0, 

lifo:

0	miss: 		0, 
1	miss: 		0, 1, 
2	miss: 		0, 1, 2, 
0	hit		    0, 1, 2, 
1	hit		    0, 1, 2, 
3	miss: 2		0, 1, 3, 
0	hit		    0, 1, 3, 
3	hit		    0, 1, 3, 
1	hit		    0, 1, 3, 
2	miss: 3		0, 1, 2, 
1	hit		    0, 1, 2,

lfu:

0	miss: 		0, 
1	miss: 		0, 1, 
2	miss: 		0, 1, 2, 
0	hit		    0, 1, 2, 
1	hit		    0, 1, 2, 
3	miss: 2		0, 1, 3, 
0	hit		    0, 1, 3, 
3	hit		    0, 1, 3, 
1	hit		    0, 1, 3, 
2	miss: 3		0, 1, 2, 
1	hit		    0, 1, 2, 

lru:

0	miss: 		0, 
1	miss: 		0, 1, 
2	miss: 		0, 1, 2, 
0	hit		    0, 1, 2, 
1	hit		    0, 1, 2, 
3	miss: 2		0, 1, 3, 
0	hit		    0, 1, 3, 
3	hit		    0, 1, 3, 
1	hit		    0, 1, 3, 
2	miss: 0		2, 1, 3, 
1	hit		    2, 1, 3,

Note that my java implementation if simplified i.e. I'm not scanning the entire pages of physical
memory. Instead I'm just maintaining a list of the used pages and scanning those to look for least
used page. In order to perfectly implement the LRU the algorithm must scan through all of the 
physical memory's pages to look for the least recently used and kick it out to disk.

"Unfortunately, as the number of pages in a system grows, scanning a huge array of times just to 
find the absolute least-recently-used page is prohibitively expensive. Imagine a modern machine 
with 4GB of memory, chopped into 4KB pages. This machine has 1 million pages, and thus finding the 
LRU page will take a long time, even at modern CPU speeds. Which begs the question: do we really 
need to find the absolute oldest page to replace? Can we instead survive with an approximation?"
- pg 12

Hence, the book says we cannot implement the 'perfect' LRU policy. Instead we need to "approximate"
the LRU page using what they call a use-bit:

"There is one use bit per page of the system, and the use bits live in memory somewhere (they could 
be in the per-process page tables, for example, or just in an array somewhere). Whenever a page is
referenced (i.e., read or written), the use bit is set by hardware to 1." - pg 12

Question: When is the per page use-bit cleared?
- The use-bit gets cleared whenever the cache is full (and just before the replacement policy kicks
in). If we imagine all the pages of physical memory are arranged in a circular list and start from
any random page going clock-wise, and then go through each page we will encounter a page who's bit 
is set to 1 (meaning it was recently used and cannot be evicted) but just before advancing to the 
next page (page + 1) in the circular list, we clear this use-bit. We keep looping thought until we
find a page whose use-bit is cleared. The benifit of this approach is we don't have to go through 
all the pages (although we may have to the first time when all bits are set, as that's the 
worst-case)

Question: What do I exactly mean by evicting a page? 
- I mean replacing it with another page. So eviction is the same as replacement. HOWEVER, if a page
gets modified then we cannot just replace that page with another page, we must first write that 
modified (dirty) page out to disk. See pg 13 - dirty pages - "it must be written back to disk to
evict it". And that eviction is an expensive operation, hence some VM systems prefer to evict clean
(unmodified) pages over dirty pages. "To support this behavior, the hardware should include a 
modified bit (a.k.a. dirty bit). This bit is set any time a page is written, and thus can be 
incorporated into the page-replacement algorithm. The clock algorithm, for example, could be 
changed to scan for pages that are both unused and clean to evict first; failing to find those, 
then for unused pages that are dirty, and so forth."

Other VM policies - go over this again - pg 14

~~~~~~~~~~~~~~~
HOMEWORK warmup
~~~~~~~~~~~~~~~

Note: They have not implemented LIFO, LFU, MFU

dos>cd C:\Users\Alifa\Desktop\ostep.org\ostep-homework\vm-beyondphys-policy

dos>python paging-policy.py -a 0,1,2,0,1,3,0,3,1,2,1 --policy=FIFO -C 3 > output\1.txt

Now run EvictionPolicy.java

dos>python paging-policy.py -a 0,1,2,0,1,3,0,3,1,2,1 --policy=FIFO -C 3 -c

Now repeat with:

dos>python paging-policy.py -a 0,1,2,0,1,3,0,3,1,2,1 --policy=LRU -C 3 > output\1.txt
dos>python paging-policy.py -p LRU -n 11 -s 0 -C 3 -c > output\1.txt
dos>python paging-policy.py -p LRU -n 20 -s 6 -C 7 > output\1.txt
dos>python paging-policy.py -p MRU -n 20 -s 6 -C 7 > output\1.txt

--------------------------------------------------------------------------------------------
HOMEWORK start

Q1) Note: the last evict for OPT my java program is different from their output.
    can you guess why? I think its because at the last miss, it doesn't matter which one
    gets evicted.

dos>python paging-policy.py -p FIFO -s 0 -n 10 > output\1.txt
dos>python paging-policy.py -p FIFO -s 0 -n 10 -c

dos>python paging-policy.py -p LRU -s 0 -n 10 > output\1.txt
dos>python paging-policy.py -p LRU -s 0 -n 10 -c

dos>python paging-policy.py -p OPT -s 0 -n 10 > output\1.txt
dos>python paging-policy.py -p OPT -s 0 -n 10 -c

dos>python paging-policy.py -p CLOCK -s 0 -n 10 > output\1.txt
dos>python paging-policy.py -p CLOCK -s 0 -n 10 -c

-

dos>python paging-policy.py -p FIFO -s 1 -n 10 > output\1.txt
dos>python paging-policy.py -p FIFO -s 1 -n 10 -c

dos>python paging-policy.py -p LRU -s 1 -n 10 > output\1.txt
dos>python paging-policy.py -p LRU -s 1 -n 10 -c

dos>python paging-policy.py -p OPT -s 1 -n 10 > output\1.txt
dos>python paging-policy.py -p OPT -s 1 -n 10 -c

dos>python paging-policy.py -p CLOCK -s 1 -n 10 > output\1.txt
dos>python paging-policy.py -p CLOCK -s 1 -n 10 -c

-

dos>python paging-policy.py -p FIFO -s 2 -n 10 > output\1.txt
dos>python paging-policy.py -p FIFO -s 2 -n 10 -c

dos>python paging-policy.py -p LRU -s 2 -n 10 > output\1.txt
dos>python paging-policy.py -p LRU -s 2 -n 10 -c

dos>python paging-policy.py -p OPT -s 2 -n 10 > output\1.txt
dos>python paging-policy.py -p OPT -s 2 -n 10 -c

dos>python paging-policy.py -p CLOCK -s 2 -n 10 > output\1.txt
dos>python paging-policy.py -p CLOCK -s 2 -n 10 -c

----------------------------------------------------------------------------

Q2-5 NOT DONE! Come back to them.

TODO: CLOCK policy
---------------------------------------------------------------------------

Clock policy algorithm - I had to cheat here by looking at the paging-policy.py source. By 
reference bits they are just iterating the number of times it will take to set each bit to 0.
Note that because they randomly select a page to start from, your output will not match theirs.

ref = array of references

for each x in access sequence
    if x in cache
        hit!
    else {
        miss
        if cache == full ?
            yes {
                while(true) {
                    toEvict = get some random page from cache
                    if(ref(toEvict) > 0) ref(toEvict)--;
                    else break;
                
                find index of toEvict from cache and replace with new one  
                cache -> x takes position of evicted page
            }
            no {
                cache -> x
                cache++
            }
    }

    if x not in ref
        ref(x) -> 1
    else {
        ref(x)++
        if(ref(x) > bits) ref(x) = bits
    }




