What is paging?

"Paging is to chop up address space of a program into fixed-sized pieces. Instead of splitting up a 
process’s address space into some number of variable-sized logical segments (e.g., code, heap, stack), 
we divide it into fixed-sized units, each of which we call a page."

What we used to do:

+-------------------+
+   code            +
+                   +
+                   +   <- variable sized chunk
+                   +
+                   +
+                   +
+-------------------+
+   heap            +
+                   +
+                   +
+                   +
+                   +
+                   +
+                   +
+                   +
+                   +
+                   +
+                   +
+                   +
+                   +
+-------------------+
+                   +
+                   +
+                   +
+   stack           +
+                   +
+                   +
+-------------------+

What paging does:

+-------------------+ vpg0  (virtual page 0)
+   code            + <---- fixed-sized chunk
+-------------------+

+-------------------+ vpg1
+   heap            +
+-------------------+

+-------------------+ vpg2
+   stack           +
+-------------------+

"Correspondingly, we view physical memory as an array of fixed-sized slots called page frames; each
of these frames can contain a single virtual-memory page"

Physical memory
+-------------------+ 
+     free          +  PF0 (page frame 0) unused - maybe reserved for OS
+-------------------+

+-------------------+ 
+     free          +  PF1 unused
+-------------------+

+-------------------+ 
+    vpg0           +  PF2 (contains vpg0)
+-------------------+

+-------------------+ 
+     free          +  PF3 unused
+-------------------+

+-------------------+ 
+    vpg1           +  PF4 (contains vpg1)
+-------------------+

+-------------------+ 
+    vpg2           +  PF5 (contains vpg2)
+-------------------+

+-------------------+ 
+     free          +  PF6 unused
+-------------------+

Fayyaz: Each PF is either empty (free) or it may contain exactly 1 VP

"As you can see in the diagram, the pages of the virtual address space have been placed at different 
locations throughout physical memory"

Fayyaz: The OS/kernel places the virtual pages at different locations in physical memory. How it does
that is still not known to me - something I will find out in coming chapters maybe.

"To record where each virtual page of the address space is placed in physical memory, the operating 
system usually keeps a per-process data structure known as a page table. The major role of the page 
table is to store address translations for each of the virtual pages of the address space, thus 
letting us know where in physical memory each page resides."

Page table:
+-------------------+-----------------+ 
|     vpg0          |  PF2            +
+-------------------------------------+
|     vpg1          |  PF4            +
+-------------------------------------+
|     vpg2          |  PF5            +
+-------------------------------------+

"It is important to remember that this page table is a per-process data structure"

Fayyaz: Lets say we now have a physical memory of size 128 bytes and each processes' address space
is 64 bytes. If we split the address space into 4 fixed chunks this means each chunk is going to be
64 / 4 = 16 bytes which will look something like figure 18.2 on page 2. Note that because an address
space is 64 bytes which means if we start from 0 we can address upto the 63rd byte. This requires
6 bits.

111111 = 63

And because we know that the total number of virtual pages for this address space is 4 (0 to 3) - 
this can be represented by the TOP 2 bits of those 6 bits. The remaining 4 bits are used for the 
offset into the page frame. So:

            00 = 0
            01 = 1
            10 = 2
            11 = 3

Hence, the vp number can be addressed with the top 2 bits. So if a virtual address of 21 is 
requested by a process this will translate to:

21 = 010101 = 01 0101 

VPN = 01 (Lookup the page table for this process to see what vp1 maps to? - it maps to PF4 so this 
returns 4)

The physical address is thus:

    100 0101 = 69

Note that in the book, they map vp1 to PF7 and they get:

    111 0101 = 117
------------------------------------------------------------------------------------------------

"Because we know the page size (16 bytes), we can further divide the virtual address as follows" -
bottom of pg 3 of book

Fayyaz: What the heck does that mean?? 
-They are dividing the VA into 2 components, the VPN and the offset. The offset is derived from the 
page size (See conclusion at the end). If the page size is 16 then we need 4 bits to address 
that, i.e 2^4 = 16. That leaves us with the top 2 bits which we use as the VPN. Simple.

"Once this *physical address* is known, the hardware can fetch the PTE from memory, extract the PFN, 
and concatenate it with the offset from the virtual address to form the desired physical address"
- pg 8 of book. 

Fayyaz: What *physical address*? They are talking about the address of the page table. Not the final
PA. They should have worded it like this: Once this physical address is known, the hardware can 
fetch the PTE from THAT address

------------------------------------------------------------------------------------------------

Fayyaz: Where are page tables stored? Short answer: somewhere in physical memory like PF0

"Because page tables are so big, we don’t keep any special on-chip hardware in the MMU to store the 
page table of the currently-running process. Instead, we store the page table for each process in 
memory somewhere."

"In Figure 18.4 (page 5) is a picture of a page table in OS memory;
see the tiny set of translations in there?"

+-------------------+ 
+     Page Table    +  PF0
+     3 7 5 2       +
+-------------------+

Fayyaz: "Tiny set of translations" - what the heck are they talking about?  They are referring to 
the mappings:

    vpg0 --> 3
    vpg1 --> 7
    vpg2 --> 5
    vpg3 --> 2
---------------------------------------------------------------------------------------------------

Fayyaz: WHAT is stored in a page table for each process? Firs of all, how does the OS even get to 
the correct page table for that process? 

"Let’s talk a little about page table organization. The page table is just a data structure that is 
used to map virtual addresses (or really, virtual page numbers) to physical addresses (physical 
frame numbers). Thus, any data structure could work. The simplest form is called a linear page
table, which is just an array. The OS indexes the array by the virtual page number (VPN), and looks 
up the page-table entry (PTE) at that index in order to find the desired physical frame number 
(PFN). For now, we will assume this simple linear structure"

Fayyaz: So based on the explanation above:

PTE = LinearPageTableArray[ vpg2 (VPN virtual page number) ] 

PTE contains the PFN (represented by some number of bits)

Knowing above, explain how the following virtual address (21) gets translated (ignore fetch for now). 
This is NOT AT&T syntax! Assume VPN has 2 bits same as above.

mov eax, 21 ; put 21 into eax register

21 = 0000000000000000 0000000000 010101 (32 bits in x86)

"the hardware must know where the page table is for the currently-running process. Let’s assume for 
now that a single page-table base register contains the physical address of the starting location 
of the page table"

hence...

address of LinearPageTableArray  is stored in some page-table base register

LinearPageTableArray = BaseRegister

VA = 21
VPN = (VA & 110000b) >> 4 = we get vpg1
PTE = LinearPageTableArray[ VPN * sizeof(PTE)] 

Now that we have the PTE, we need to extract the PFN. In x86, the PFN is bits 31 - 12:

0000000000000000 0000 000000 010101

which gives us:

0000 0000 0000 0000 0000 000000 010101

therefore:

PFN = VA & 0xfffff
Offset = VA & 0xf

finally, the physical address:

PA = PFN << 4* | offset

*can you guess why we shift by 4? Because the offset is 4 bits.

eax = PA

Note: the PTE does NOT contain the VPN! We only get the VPN from the VA

VOILA!
-------------------------------------------------------------------------------------------------

~~~~~~~~~~~~~~~~~~~~
The final trace 18.5
~~~~~~~~~~~~~~~~~~~~

"For this example, we assume a virtual address space of size 64KB (unrealistically small). We also 
assume a page size of 1KB....Let’s assume we have a linear (array-based) page table and that it is 
located at physical address 1KB (1024)."

+-------------------+ 0
+  Page table[0]    + PF0 
+-------------------+ 1023

+-------------------+ 1024
+                   + PF1 
+-------------------+ 2047

+-------------------+ 2048
+                   + PF2 
+-------------------+ 3071

"When it runs, each instruction fetch will generate two memory references: one to the page table to 
find the physical frame that the instruction resides within, and one to the instruction itself to 
fetch it to the CPU for processing. In addition, there is one explicit memory reference in the form 
of the mov instruction; this adds another page table access first (to translate the array virtual 
address to the correct physical one) and then the array access itself."

Fayyaz: "When it runs, each instruction fetch will generate two memory references" - Why two? Let's 
take the mov instruction, first is the fetch to actually get the mov instruction:

The fetch requires two memory access: 
    (1) to find the PF where this instruction resides (involves the Lookup table)
    (2) to fetch the cpu instruction from the actual physical address derived from (1)

Fayyaz: And then what? The mov instruction has nother PF check (another memory reference) to 
generate the PA for the location of the array followed by accessing THAT array itself (another 
memory ref). In total there are 4 memory references JUST FOR THE MOV INSTRUCTION! That's why you
see 4 dots for the mov instruction on each x-axis.

Per loop here are the total memory references (access): total 10

    move:   4
    inc:    2
    cmp:    2
    jne:    2
    ----------
    10
    ----------

~~~~~~~~~~~~~~~~~~~~~~~~~~
paging-linear-translate.py
~~~~~~~~~~~~~~~~~~~~~~~~~~ 

dos>cd C:\Users\Alifa\Desktop\ostep.org\ostep-homework\vm-paging

dos>python paging-linear-translate.py

ARG address space size 16k
ARG phys mem size 64k
ARG page size 4k

Fayyaz: Lets say we now have a physical memory of size 64k and each processes' address space
is 16k. If we split the address space into 4 fixed chunks this means each chunk is going to be
16 / 4 = 4k. Note that because an address space is 16k which means if we start from 0 we can 
address upto the 16,383 byte per process. This requires 14 bits = 11 1111 1111 1111 = 0x3fff
Notice that 1111 1111 1111, which is the offset, fits pefectly into the page size (4k)

And because we know that the total number of virtual pages for this address space is 4 (0 to 3) - 
this can be represented by the TOP 2 bits of those 14 bits. The remaining 12 bits are used for the 
offset into the page frame. So:

            00 = 0
            01 = 1
            10 = 2
            11 = 3

Hence, the vp number can be addressed with the top 2 bits. Knowing this, translate the following 
VA to PA: 0x00003229 which in binary is: 11 0010 0010 1001

VA = 0x00003229
VPN = (VA & 0x3fff) >> 12 = we get vpg3 (VPN = 3)
PTE = LinearPageTableArray[ VPN* ] = 0x80000006 = 10000000000000000000000000000110

*Note that we are not doing this here: VPN * sizeof(PTE) Why? Because they haven't specified
the PTE size.

The top most bit is 1 which makes this valid and the remaining entry is 110 = 6. So VPN 3 maps
to PF 6 i.e PFN = 6. Now need to calculate th offset. Offset is the last 12 bits of the VA

Offset = VA & 0xfff = 0010 0010 1001
PA  = 6 << 12 | 0010 0010 1001

Using Java:

int x=0b110;
int y=0b1000101001;
int z= x << 12 | y; // can you guess why we shift by 12? 
                    // because the offset (y) is 12 bits
z = 11000 1000101001

System.out.printf("%x, %d",z,z); // 0x6229, 25129

Full solution: C:\Users\Alifa\Desktop\lc3-backup\eclipse\Ostep\src\chapter\PLinearTranslate.java
3229 ---> 6229
1369 is invalid
1e80 is invalid
2556 is invalid      
3a1e ---> 6a1e

~~~~~~~~
homework
~~~~~~~~

Q1)

dos>python paging-linear-translate.py -P 1k -a 1m -p 512m -v -n 0
dos>python paging-linear-translate.py -P 1k -a 2m -p 512m -v -n 0
dos>python paging-linear-translate.py -P 1k -a 4m -p 512m -v -n 0

How should page-table size change as the address space grows? Direcly proportional.

dos>python paging-linear-translate.py -P 1k -a 1m -p 512m -v -n 0
dos>python paging-linear-translate.py -P 2k -a 1m -p 512m -v -n 0
dos>python paging-linear-translate.py -P 4k -a 1m -p 512m -v -n 0

As the page size grows? Inversely proportional

Q2)

dos>python paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 0

dos>python paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 50
dos>python paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 75
dos>python paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 100

ARG address space size 16k
ARG phys mem size 32k
ARG page size 1k

Use your java program to calculate above Q2
C:\Users\Alifa\Desktop\lc3-backup\eclipse\Ostep\src\chapter\PLinearTranslate.java

Since page size is now reduced to 1k, we need more entries in the table. Why ? because 16 / 16 = 1. 
We now need 16 entries. And since we now need to index 16 entries we need top 4 bits of the 14 bits
(address space is still 16k as above so we still use 14 bits). 

    1111 1111 1111 11

This means the offsetShift is now 10

    int offsetShift = 10;

Hence we get:
3a39 is invalid
3ee5 is invalid
33da is invalid
39bd is invalid
13d9 is invalid

This was pretty obvious since -u is 0

dos>python paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 25

3986 is invalid
2bc6 ---> 4fc6
1e37 is invalid
671 is invalid
1bc9 is invalid

dos>python paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 50

3385 ---> 3f85 [VPN 12]
231d is invalid [VPN 8]
e6 ---> 60e6 [VPN 0]
2e0f is invalid [VPN 11]
1986 ---> 7586 [VPN 6]

dos>python paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 75

2e0f ---> 4e0f [VPN 11]
1986 ---> 7d86 [VPN 6]
34ca ---> 6cca [VPN 13]
2ac3 ---> ec3 [VPN 10]
12 ---> 6012 [VPN 0]

dos>python paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 100

2e0f ---> 4e0f [VPN 11]
1986 ---> 7d86 [VPN 6]
34ca ---> 6cca [VPN 13]
2ac3 ---> ec3 [VPN 10]
12 ---> 6012 [VPN 0]

What happens as you increase the percentage of pages that are allocated in each address space?
- You get less seg faults (more valid translations)

Q3)

This looks normal: -P 8 -a 32 -p 1024 -v -s 1
dos>python paging-linear-translate.py -P 8 -a 32 -p 1024 -v -s 1


This looks normal too: -P 8k -a 32k -p 1m -v -s 2
dos>python paging-linear-translate.py -P 8k -a 32k -p 1m -v -s 2

This is definitely not normal: only 1m for page size? We will have 256 chunks for an address space
of 256m and alot of PTEs!! 
-P 1m -a 256m -p 512m -v -s 3

dos>python paging-linear-translate.py -P 1m -a 256m -p 512m -v -s 3

Note: If you want to solve the first two then you need to adjust the number of bits that can address
that address space. Don't do that last one it has 256 PTEs!!

dos>python paging-linear-translate.py -P 8 -a 32 -p 1024 -v -s 1
dos>python paging-linear-translate.py -P 8k -a 32k -p 1m -v -s 2

Let's solve the first one:

ARG address space size 32
ARG phys mem size 1024
ARG page size 8

Page Table (from entry 0 down to the max size)
  [       0]  0x00000000
  [       1]  0x80000061
  [       2]  0x00000000
  [       3]  0x00000000

VA 0x0000000e (decimal:       14) --> PA or invalid address?
VA 0x00000014 (decimal:       20) --> PA or invalid address?
VA 0x00000019 (decimal:       25) --> PA or invalid address?
VA 0x00000003 (decimal:        3) --> PA or invalid address?
VA 0x00000000 (decimal:        0) --> PA or invalid address?

32 / 8 = 4 hence 4 PTEs. Since address space is 32 we need a total of 5 bits (0-31) and top 2
for selecting the VPN. 11 111

0x0000000e: 01 110: vpn = 1: 0x80000061: This is valid: PA: 1100001 110: 0x30e
0x00000014: 10 100: vpn = 2: 0x00000000: invalid
0x00000019: 11 001: vpn = 3: 0x00000000: invalid
0x00000003: 00 011: vpn = 0: 0x00000000: invalid
0x00000000: 00 000: vpn = 0: 0x00000000: invalid

Let's solve the second one:

ARG address space size 32k
ARG phys mem size 1m
ARG page size 8k

32 / 8 = 4 hence 4 PTEs. Since address space is 32k we need a total of 15 bits (0-32767) and top 2
for selecting the VPN. 11 1111111111111

Page Table (from entry 0 down to the max size)
  [       0]  0x80000079
  [       1]  0x00000000
  [       2]  0x00000000
  [       3]  0x8000005e

0x000055b9: 10 1010110111001: vpn = 2: 0x00000000: invalid
0x00002771: 01 0011101110001: vpn = 1: 0x00000000: invalid
0x00004d8f: 10 0110110001111: vpn = 2: 0x00000000: invalid
0x00004dab: 10 0110110101011: vpn = 2: 0x00000000: invalid
0x00004a64: 10 0101001100100: vpn = 2: 0x00000000: invalid

Q4) Not done. Address space size should never be > physical memory

This concludes paging homework :) You may want to revist Q1 and Q4

~~~~~~~~~~
Conclusion
~~~~~~~~~~

The virtual address (VA) contains the VPN (vpg#) and the offset into the page frame (PF) of 
physical memory. VPN is usually some top bits of the VA while remaining bits makeup the offset. 
From the VPN we index the page table and find the page table entry (PTE) which contains the valid
bit (among other bits like access level) and finally the page frame number (PFN). The final 
physical (PA) is then calculated by first shifting the PFN to the left by the number of offset bits
and ORing it with the offset.

Updated conclusion Oct 19 2021
------------------------------

Don’t be concerned with the Physical Memory. Just focus on the Address Space and the Page size 
because these two determine the number of PTEs (Page Table Entry) and thus, the size of the page 
table. A PTE holds the PFN which is then combined (ORed) with the offset (taken from the virtual 
address aka VA). 

Hence the offset (bottom bits in VA) depends on the page size. For example, a cpu with address space
of 32 bits with a page size of 4K will have a 12 bit offset: 2^12 = 4K, while the top 20 bits make 
up the VPN which means there are 2^20 PTEs (translations/mappings)!!

If the page size is static then so is the offset; then any increase in the address space would mean 
more VPN bits (top bits in VA) and thus more PTEs and a bigger page table to hold those entries. 

If the address space is static then as the page size grows so does the offset, meaning the # of VPN 
bits decrease which means LESS PTEs and a smaller page table!  Hence increasing the page size can 
help in making the page table smaller.

How should page table size change as the address space grows? Assuming page size remains the same, 
page table size will increase with address space growth. 

How should page table size change as page size grows? Assuming address space remains the same, 
page table size will shrink as page size increases since there will be less PTEs.

Based on this updated conclusion let's revisit Q1.

-P 1k -a 1m -p 512m -v -n 0 : 1024 entries
-P 1k -a 2m -p 512m -v -n 0 : 2048 entries
-P 1k -a 4m -p 512m -v -n 0 : 4095 entries

Here we see the page size is static so as we expand the address space we will get more PTEs and a 
larger table per process.

-P 1k -a 1m -p 512m -v -n 0 : 1024 entries
-P 2k -a 1m -p 512m -v -n 0 : 512 entries
-P 4k -a 1m -p 512m -v -n 0 : 255 entries

Here the address space is statis so as we expand the page size (-P) the VPN size decreases meaning
we have less VPNs to deal with and hence fewer PTEs and a smaller table per process.

Why not use big pages in general? Good question. I think its because that would defeat the purpose
of virtualizing memory. Perhaps?











